name: 'build'
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '**'

# On any PR branch, cancel active workflows if new code is pushed to the same head_ref (i.e., the same PR).
# Fallback to github.run_id for non-PRs
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-22.04, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
      - name: install frontend dependencies
        run: pnpm install
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: src-tauri

  fmt:
    runs-on: ubuntu-latest
    name: stable / fmt
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: cargo fmt --check
        run: cargo fmt --check
        working-directory: src-tauri

  clippy:
    runs-on: ubuntu-latest
    name: ${{ matrix.toolchain }} / clippy
    permissions:
      contents: read
      checks: write
    strategy:
      fail-fast: false
      matrix:
        # Get early warning of new lints
        toolchain: [stable, beta]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install ${{ matrix.toolchain }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          components: clippy
      - name: cargo clippy
        uses: giraffate/clippy-action@v1
        with:
          reporter: 'github-pr-check'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          args: --manifest-path src-tauri/Cargo.toml

  semver:
    runs-on: ubuntu-latest
    name: semver
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: cargo-semver-checks
        uses: obi1kenobi/cargo-semver-checks-action@v2
        with:
          args: --manifest-path src-tauri/Cargo.toml

  doc:
    # run docs generation on nightly rather than stable
    runs-on: ubuntu-latest
    name: nightly / doc
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install nightly
        uses: dtolnay/rust-toolchain@nightly
      - name: Install cargo-docs-rs
        uses: dtolnay/install@cargo-docs-rs
      - name: cargo docs-rs
        run: cargo docs-rs
        working-directory: src-tauri

  hack:
    # cargo-hack checks combinations of feature flags to ensure that features are all additive
    # which is required for feature unification
    runs-on: ubuntu-latest
    name: ubuntu / stable / features
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
      - name: cargo install cargo-hack
        uses: taiki-e/install-action@cargo-hack
      # --feature-powerset runs for every combination of features; no target specifier
      - name: cargo hack
        run: cargo hack --feature-powerset check
        working-directory: src-tauri

  msrv:
    # check that we can build using the minimal rust version that is specified by this crate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        msrv: ["1.56.1"] # 2021 edition requires 1.56
    name: ubuntu / ${{ matrix.msrv }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install ${{ matrix.msrv }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.msrv }}
      - name: Generate lockfile with Rust ${{ matrix.msrv }}
        run: cargo +${{ matrix.msrv }} generate-lockfile
        working-directory: src-tauri
      - name: cargo +${{ matrix.msrv }} check
        run: cargo check --locked
        working-directory: src-tauri
